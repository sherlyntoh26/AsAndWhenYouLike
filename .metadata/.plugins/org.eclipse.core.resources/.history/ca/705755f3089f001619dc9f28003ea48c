package mongodb;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.bson.Document;

import com.mongodb.BasicDBObject;
import com.mongodb.client.MongoDatabase;

public class NewOrderTransaction {
	private MongoDatabase database;

	public NewOrderTransaction(){
		// public constructor
	}
	
	public NewOrderTransaction(Connection connection){
		database = connection.getDatabase();
	}
	
	public void newOrder(int wID, int dID, int cID, int numOfItems, int[] itemNumberArr, int[] sWarehouseID,
			int[] quantities) {
		
		// get d_next_o_id from given wid, did
		BasicDBObject dcDistrictQuery = new BasicDBObject("dWId", wID).append("dId", dID);
		BasicDBObject dcDistrictProjection = new BasicDBObject("dNextOId", 1).append("dTax", 1);
		Document dcDistrict = database.getCollection("district").find(dcDistrictQuery).projection(dcDistrictProjection).first();
		int dNextOId = dcDistrict.getInteger("dNextOId");
		double dTax = dcDistrict.getDouble("dTax");
		
		// update d_next_o_id by 1
		Document dcDistrictUpdate = new Document("dNextOId", dNextOId+1);
		//dcDistrictUpdate.put("dNextOId", dNextOId+1);
		database.getCollection("district").replaceOne(dcDistrictQuery, dcDistrictUpdate);
		
		// create newOrder
		int allLocal = 1;
		double totalAmt = 0.0;
		ArrayList<String> arrayListOutput = new ArrayList<String>();
		ArrayList<Map<String, Object>> orderLineArr = new ArrayList<Map<String, Object>>();
		
		Document dcInvProjection = new Document("iQty", 1).append("iYtd", 1).append("iOrderCnt", 1).append("iRemoteCnt", 1).append("iPrice", 1).append("iName", 1);
		
		for (int i=0; i<numOfItems; i++){
			Document dcInvQuery = new Document("iWId", wID).append("iId", itemNumberArr[i]);
			Document dcInv = database.getCollection("inventory").find(dcInvQuery).projection(dcInvProjection).first();
			int invQty = dcInv.getInteger("iQty");
			double invYtd = dcInv.getDouble("iYtd");
			int invOrderCnt = dcInv.getInteger("iOrderCnt");
			int invRemoteCnt = dcInv.getInteger("iRemoteCnt");
			double invPrice = dcInv.getDouble("iPrice");
			String invName = dcInv.getString("iName");
			double itemAmt = (quantities[i] * invPrice);
			totalAmt += itemAmt;
			
			int adjustedQty = invQty - quantities[i];
			if(adjustedQty < 10){
				adjustedQty +=100;
			}
			if(sWarehouseID[i] != wID){
				allLocal=0;
				invRemoteCnt +=1;
			}
			
			// update Inventory
			Document dcInvUpdate = new Document("iQty", adjustedQty).append("iYtd", invYtd+quantities[i]).append("invOrderCnt", invOrderCnt+1).append("iRemoteCnt", invRemoteCnt);
			database.getCollection("inventory").replaceOne(dcInvQuery, dcInvUpdate);
			
			// create document for 1 orderLine --> place it in array first
			Map<String, Object> itemMap = new HashMap<String, Object>();
			itemMap.put("num", i+1);
			itemMap.put("iId", itemNumberArr[i]);
			itemMap.put("amt", itemAmt);
			itemMap.put("supplyWId", sWarehouseID[i]);
			itemMap.put("qty", quantities[i]);
			itemMap.put("distInfo", "S_DIST_" + dID);
			itemMap.put("iName", invName);
			orderLineArr.add(itemMap);
			
			// prepare printing statement
			arrayListOutput.add(String.format("Item: %d | %s, Warehouse %d. Quantity: %d. Amount: %.2f, Stock: %d",
					itemNumberArr[i], invName, sWarehouseID[i], quantities[i], itemAmt, adjustedQty));
		}
		
		// insert into collection Order
		Timestamp orderDate = new Timestamp(System.currentTimeMillis());
		Map<String, Object> orderMap = new HashMap<String, Object>();
		orderMap.put("oWId", wID);
		orderMap.put("oDId", dID);
		orderMap.put("oId", dNextOId);
		orderMap.put("oCId", cID);
		orderMap.put("oCarrierId", 1);
		orderMap.put("oOlCnt", numOfItems);
		orderMap.put("oAllLocal", allLocal);
		orderMap.put("oEntryDate", orderDate);
		orderMap.put("oDeliveryDate", null);
		orderMap.put("oTotalAmt", totalAmt);
		orderMap.put("oOrderLine", orderLineArr);
		database.getCollection("order").insertOne(new Document(orderMap));
		
		// get customer information
		Document dcCustomerQuery = new Document("cWId", wID).append("cDId", dID).append("cId", cID);
		Document dcCustomerProjection = new Document("cName.last", 1).append("credit", 1).append("cDiscount", 1);
		Document dcCustomer = database.getCollection("customer").find(dcCustomerQuery).projection(dcCustomerProjection).first();
		double cDiscount = dcCustomer.getDouble("cDiscount");
		
		// get warehouse information
		Document dcWarehouseQuery = new Document("wId", wID);
		Document dcWarehouseProjection = new Document("wTax", 1);
		Document dcWarehouse = database.getCollection("warehouse").find(dcWarehouseQuery).projection(dcWarehouseProjection).first();
		double wTax = dcWarehouse.getDouble("wTax");
		totalAmt = totalAmt * (1 + dTax + wTax) * (1 - cDiscount);
		
		System.out.println(String.format("Customer %s, %s, %.4f", dcCustomer.get("cName.last"), dcCustomer.get("cCredit"), cDiscount));
		System.out.println(String.format("Warehouse Tax: %.4f, District tax: %.4f", wTax, dTax));
		System.out.println(String.format("Order Number: %d, Entry Date: %s", dNextOId, orderDate));
		System.out.println(String.format("Number of Item: %d, Total amount: %.2f", numOfItems, totalAmt));

		for (String str : arrayListOutput) {
			System.out.println(str);
		}
	}
}
